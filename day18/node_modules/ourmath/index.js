/*
avg function
inputs: nums[] ...nums
- sum all nums
- divide sum on nums.length
- return result
*/
exports.avg = function avg(...nums){
    let result = 0;
    for(let i =0; i < nums.length; i++){
        result += nums[i];
    }
    result /= nums.length;
    return result;
}

/*
sets union
inputs: 2 arrays .. first_set .. second_set
steps:
- copy first_array elements to the result.
- copy from second_set to the rsult all elements that is not included in the 
first_set
- return result
*/
exports.unionTwoSets = function unionTwoSets(first_set, second_set){
    let result = [];
    for(let i =0; i < first_set.length; i++){
        result.push(first_set[i]);
    }
    for(let i =0; i < second_set.length; i++){
        // if(result.includes(second_set[i])){
        //     continue;
        // }
        // result.push(second_set[i]);

        if(!result.includes(second_set[i])){
            result.push(second_set[i]);
        }
    }
    return result;
}

/*
sets intersection
inputs: 2 arrays .. first_set .. second_set
steps:
for each item in first_set:
  - if the item includes in the second set then push it to the result
*/
exports.intersection = function intersection(first_set, second_set){
    let result = [];
    for(let i =0; i < first_set.length; i++){
        if(second_set.includes(first_set[i])){
            result.push(first_set[i]);
        }
    }
    return result;
}

/*
max
inputs: ...nums
steps:
- temp variable max = the smallest number value
- for each item in nmus
 - if item > max then max = item
return max
*/
exports.max = function max(...nums){
    let max = Number.NEGATIVE_INFINITY;
    for(let i =0; i < nums.length; i++){
        if (nums[i] > max){
            max = nums[i];
        }
    }
    return max;
}


// min
// sets difference